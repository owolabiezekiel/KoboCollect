/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

applicationScripts.each {
    apply from: it
}

apply plugin: 'com.android.application'

com.android.ddmlib.DdmPreferences.setTimeOut(60000)

android {
    // The following are set in the common.gradle file
    compileSdkVersion 19
    buildToolsVersion("22.0.1")
    // compileSdkVersion(compileVersion)
    // buildToolsVersion(buildTools)
    defaultConfig {
        applicationId("org.odk.collect.android")
        minSdkVersion(8)
        targetSdkVersion(8)
        versionCode(1057)
        versionName("1.4.8")
    }
    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    flavorDimensions "default"

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }
    productFlavors {
        kobo {
            minSdkVersion 8
            applicationId 'org.koboc.collect.android'
            targetSdkVersion 8
            versionCode 1057
            versionName '1.4.8'
        }
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
    transitive = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    if (playServicesPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(playServicesName)
    } else {
        implementation(group: groupId, name: playServicesArtifactName,
                version: (useLatestPlayServices ? latestVersion : playServicesSnapshot), ext: 'aar')
    }

    // Testing-only dependencies
    androidTestImplementation 'com.android.support.test:runner:0.3'
    androidTestImplementation 'com.android.support.test:rules:0.3'
    androidTestImplementation 'com.android.support:support-annotations:23.1.0'
    androidTestImplementation 'com.android.support:support-v13:23.1.0'
    androidTestImplementation 'junit:junit:4.12'

    testImplementation 'junit:junit:4.12'
}
